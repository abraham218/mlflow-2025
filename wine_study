# RUN this only from Jupyter Notebook or modify to the script to run as python script

# configure environement variables
import os
#http://172.19.175.179:5000/
os.environ["MLFLOW_S3_ENDPOINT_URL"] = "http://172.19.175.179:9000"
os.environ["AWS_ACCESS_KEY_ID"] = "mlflow"
os.environ["AWS_SECRET_ACCESS_KEY"] = "NewStrong2025!"

# Check the bucket 

import boto3
from pprint import pprint

s3 = boto3.client(
    's3',
    endpoint_url='http://172.19.175.179:9000',  # âœ… S3 API port
    aws_access_key_id='mlflow',
    aws_secret_access_key='NewStrong2025!',
    #region_name='us-east-1'  # optional but common default
)

# List all buckets
#print(s3.list_buckets())
pprint(s3.list_buckets().get('Buckets'))

###############################################################
# Main Script

import warnings
import logging
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import ElasticNet

# Set the remote MLflow tracking server
mlflow.set_tracking_uri("http://172.19.175.179:5000")

# Optional: Set experiment name (will be created if it doesn't exist)
mlflow.set_experiment("wine-quality-elasticnet-AB")

logging.basicConfig(level=logging.WARN)
logger = logging.getLogger(__name__)

# Evaluation function
def eval_metrics(actual, pred):
    rmse = np.sqrt(mean_squared_error(actual, pred))
    mae = mean_absolute_error(actual, pred)
    r2 = r2_score(actual, pred)
    return rmse, mae, r2

warnings.filterwarnings("ignore")
np.random.seed(40)

data = pd.read_csv("red-wine-quality.csv")

train, test = train_test_split(data, test_size=0.25, random_state=42)

train_x = train.drop(["quality"], axis=1)
test_x = test.drop(["quality"], axis=1)
train_y = train[["quality"]]
test_y = test[["quality"]]

alpha = 0.6
l1_ratio = 0.5

with mlflow.start_run():
    lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)
    lr.fit(train_x, train_y.values)

    predicted_qualities = lr.predict(test_x)
    (rmse, mae, r2) = eval_metrics(test_y.values, predicted_qualities)

    print("ElasticNet model (alpha={:f}, l1_ratio={:f}):".format(alpha, l1_ratio))
    print("  RMSE: %s" % rmse)
    print("  MAE: %s" % mae)
    print("  R2: %s" % r2)

    # Log parameters, metrics, and model to MLflow
    mlflow.log_param("alpha", alpha)
    mlflow.log_param("l1_ratio", l1_ratio)
    mlflow.log_metric("rmse", rmse)
    mlflow.log_metric("mae", mae)
    mlflow.log_metric("r2", r2)

    # Log the model
    mlflow.sklearn.log_model(lr, "model")

